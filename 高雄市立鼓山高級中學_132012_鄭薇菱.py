# -*- coding: utf-8 -*-
"""高雄市立鼓山高級中學_132012_鄭薇菱

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17SzroP0NZtVpiEwYJCUX6sgsMaYQw_ec
"""

import pandas as pd
df = pd.read_csv('觀光遊憩據點按縣市及遊憩據點交叉分析.csv')  # 讀取文件
#df.describe()  # 輸出基礎統計信息
df.head(5)

# 刪除第0行，假設是包含列名錯誤行的地方
df_cleaned = df.drop(0)

# 查看是否還有 NaN 值的行，刪除包含 NaN 的行（如果需要）
df_cleaned = df_cleaned.dropna(how='all')  # 刪除全是 NaN 的行

# 如果有些列的 NaN 可以忽略，僅刪除特定列的 NaN（如 '縣市' 和 '遊憩據點'）
df_cleaned = df_cleaned.dropna(subset=['縣市', '遊憩據點'])

# 查看清理後的數據
print(df_cleaned.head())

df = df_cleaned
df.head(5)

"""## 時間序列分析：

- 分析每個月的遊客數趨勢，使用 plot() 進行可視化展示。
- 例如，繪製特定景點在不同年份的遊客數變化趨勢。
"""

# Colab 進行matplotlib繪圖時顯示繁體中文
# 下載台北思源黑體並命名taipei_sans_tc_beta.ttf，移至指定路徑
!wget -O TaipeiSansTCBeta-Regular.ttf https://drive.google.com/uc?id=1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_&export=download

import matplotlib

# 改style要在改font之前
# plt.style.use('seaborn')

matplotlib.font_manager.fontManager.addfont('TaipeiSansTCBeta-Regular.ttf')
matplotlib.rc('font', family='Taipei Sans TC Beta')

df.set_index('遊憩據點', inplace=True)  # 設置景點名稱為索引
df.head(5)

#df.T.plot()  # 畫出時間序列圖，按月展示各景點的遊客數

# 確保數值列，從第5列開始是數值列
df_numeric = df.iloc[:10, 3:3+12]  # 選擇數值列

# 將字符串轉換為數值，強制轉換錯誤項為 NaN
df_numeric = df_numeric.apply(pd.to_numeric, errors='coerce')

# 處理缺失值，例如用 0 填充
df_numeric.fillna(0, inplace=True)

# 將數據轉置並繪製圖表
df_numeric.T.plot()

"""## 按年匯總遊客數：

- 匯總各景點每年的總遊客數，查看哪個年份的遊客最多。
- 可以通過篩選列名和 groupby() 方法按年份分組。
"""

# 將中華民國年份轉換為公歷年份，並使用 pd.to_datetime 進行日期解析
def convert_to_gregorian(date_str):
    #print(date_str)
    date_str = date_str.strip('月')
    year_str, month_str = date_str.split('年')
    roc_year = int(year_str)  # 中華民國年份
    gregorian_year = roc_year + 1911  # 轉換為公歷年
    #print(f'{gregorian_year}年{month_str}月')
    return f'{gregorian_year}/{month_str}'

# 轉換列名中的中華民國年為公歷年
new_columns = [convert_to_gregorian(col) for col in df.columns[3:-1]]

# 將轉換後的年份設置為列名
df.columns = list(df.columns[:3]) + new_columns + list(df.columns[-1:])

# 查看結果
df.head(5)

# 假設 df 是你的數據
# 重置索引以便於使用 melt
df.reset_index(inplace=True)

# 使用 melt 將 DataFrame 轉換為長表格形式
df_melted = df.melt(id_vars=[ '遊憩據點','縣市', 'Unnamed: 1',  'Unnamed: 3'],
                    var_name='日期', value_name='遊客數')

# 提取年份，並將其轉換為整數
df_melted['年份'] = pd.to_datetime(df_melted['日期'], format='%Y/%m', errors='coerce').dt.year

# 清理遊客數，去除空格，替換缺失值為0，並轉換為整數
df_melted['遊客數'] = df_melted['遊客數'].str.replace(' ', '').astype(float).fillna(0).astype(int)

# 按年份和縣市匯總遊客數
yearly_summary = df_melted.groupby(['年份', '縣市'])['遊客數'].sum().reset_index()

# 輸出年度遊客匯總
print(yearly_summary)

import seaborn as sns
import matplotlib.pyplot as plt

# 設置圖形風格
sns.set(style='whitegrid')

# 改style要在改font之前
matplotlib.font_manager.fontManager.addfont('TaipeiSansTCBeta-Regular.ttf')
matplotlib.rc('font', family='Taipei Sans TC Beta')

# 創建圖形
plt.figure(figsize=(12, 6))

# 使用 seaborn 的線性圖繪製每個縣市的年度遊客數
sns.lineplot(data=yearly_summary, x='年份', y='遊客數', hue='縣市', marker='o')

# 添加標題和標籤
plt.title('年度遊客數匯總', fontsize=16)
plt.xlabel('年份', fontsize=14)
plt.ylabel('遊客數', fontsize=14)
plt.xticks(yearly_summary['年份'].unique())  # 確保每個年份都顯示
plt.legend(title='縣市', bbox_to_anchor=(1.05, 1), loc='upper left')

# 顯示圖形
plt.tight_layout()
plt.show()

# 按年度匯總每年的遊客數
df_yearly_summary = df_melted.groupby('年份')['遊客數'].sum().reset_index()

# 找出遊客數最多的年份
max_year = df_yearly_summary[df_yearly_summary['遊客數'] == df_yearly_summary['遊客數'].max()]

# 打印匯總結果和最多遊客的年份
print(df_yearly_summary)
print("遊客最多的年份是：")
print(max_year)

# 創建圖形
plt.figure(figsize=(10, 6))

# 繪製折線圖
plt.plot(df_yearly_summary['年份'], df_yearly_summary['遊客數'], marker='o', linestyle='-', color='b')

# 添加標題和標籤
plt.title('年度遊客數匯總', fontsize=16)
plt.xlabel('年份', fontsize=14)
plt.ylabel('遊客數', fontsize=14)

# 設置 x 軸為整數年份
plt.xticks(df_yearly_summary['年份'].astype(int))

# 顯示網格
plt.grid(True)

# 顯示圖形
plt.tight_layout()
plt.show()

"""## 區域匯總：

- 匯總不同區域（如縣市）的遊客總數，查看哪個縣市的遊客最多。
- 使用 groupby() 函數按「縣市」進行分組統計。
"""

# 將月份列轉換為數值並匯總
months = df.columns[3:-1]  # 獲取所有月份的列
df[months] = df[months].apply(pd.to_numeric, errors='coerce')  # 轉換為數值

# 按縣市匯總遊客數
county_summary = df.groupby('縣市')[months].sum().reset_index()

# 計算小計
county_summary['小計'] = county_summary[months].sum(axis=1)

# 創建圖形
plt.figure(figsize=(10, 6))

# 使用條形圖繪製每個縣市的遊客數總和
plt.bar(county_summary['縣市'], county_summary['小計'], color='skyblue')

# 添加標題和標籤
plt.title('各縣市遊客數匯總', fontsize=16)
plt.xlabel('縣市', fontsize=14)
plt.ylabel('遊客數', fontsize=14)

# 顯示網格
plt.grid(axis='y')

# 顯示圖形
plt.xticks(rotation=45)  # 旋轉 x 軸標籤以避免重疊
plt.tight_layout()
plt.show()

"""## 景點間的遊客差異分析：

- 比較各個景點在特定時間段內的遊客差異，可以使用箱線圖或柱狀圖進行可視化。
"""

# 繪製箱型圖
plt.figure(figsize=(12, 6))
df.boxplot(column=list(df.columns[4:4+12]))

# 添加標題和標籤
plt.title('各月份遊客數據的箱型圖', fontsize=16)
plt.xlabel('月份', fontsize=14)
plt.ylabel('遊客數', fontsize=14)

# 顯示圖形
plt.xticks(rotation=45)  # 旋轉 x 軸標籤
plt.tight_layout()
plt.show()

"""# 可以住哪裡？"""

import json

with open('HotelList.json', 'r', encoding='utf-8-sig') as file:
    data = json.load(file)

# 將 JSON 轉換為 DataFrame
hotels_df = pd.json_normalize(data['Hotels'])

# 用戶輸入的城市名稱
user_input_city = input("請輸入城市名稱（例如：臺東縣）：")

# 篩選並列出相應的旅館名稱
matching_hotels = hotels_df[hotels_df['PostalAddress.City'] == user_input_city]

if not matching_hotels.empty:
    print("在", user_input_city, "的旅館有：")
    print(matching_hotels['HotelName'].to_string(index=False))
else:
    print("未找到", user_input_city, "的旅館。")

# 用戶輸入的服務資訊關鍵字
user_input_service = input("請輸入想要的服務資訊關鍵字（例如：自行車友善）：")
matching_hotels_city = matching_hotels
# 進一步篩選包含服務資訊的旅館
matching_hotels = matching_hotels_city[
    matching_hotels_city['ServiceInfo'].str.contains(user_input_service, na=False)
]

if not matching_hotels.empty:
    print("在", user_input_city, "的符合條件的旅館有：")
    print(matching_hotels[['HotelName', 'ServiceInfo']].to_string(index=False))
else:
    print("未找到在", user_input_city, "符合服務資訊的旅館。")

# 用戶輸入的預算範圍
user_input_budget = int(input("請輸入預算（例如：2500）："))

# 最後篩選符合預算範圍的旅館
final_matching_hotels = matching_hotels[
    (matching_hotels['LowestPrice'] <= user_input_budget) &
    (matching_hotels['CeilingPrice'] >= user_input_budget)
]

if not final_matching_hotels.empty:
    print("在", user_input_city, "的符合 ",user_input_service," 條件的旅館有：")
    print(final_matching_hotels[['HotelName','LowestPrice', 'CeilingPrice',  'ServiceInfo']].to_string(index=False))
else:
    print("未找到在", user_input_city, "符合服務資訊和預算的旅館。")

"""## 有沒有可能再更進階一點呢？
- 這些資料即時自動從網站下載，而不用上傳呢？
- 與地圖搭配，直接把這些點顯示在地圖上呢？ (以上json原始資料有座標)
- 能否給他我的座標，直接篩選出離我最近的十間旅館呢？

"""