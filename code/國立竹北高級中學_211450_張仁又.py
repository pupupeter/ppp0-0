# -*- coding: utf-8 -*-
"""ihatehw.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aUWSYDku8zJ1mzQAPPHdqyJ0q_1npR_t
"""

import pandas as pd
import warnings
import json
import os
import matplotlib.pyplot as plt
import numpy as np

warnings.filterwarnings("ignore",category=FutureWarning)
df = pd.read_csv('觀光遊憩據點按縣市及遊憩據點交叉分析.csv')
df_cleaned = df.drop(0)
df_cleaned = df_cleaned.dropna(how='all')
df_cleaned = df_cleaned.dropna(subset=['縣市', '遊憩據點'])

# Replace county names with English
county_name_mapping = {
   '金門縣': 'Kinmen',
   '臺東縣': 'Taitung',
   '澎湖縣': 'Penghu',
   '連江縣': 'Lianjiang'
}
df_cleaned['縣市'] = df_cleaned['縣市'].replace(county_name_mapping)

# Convert ROC dates to Gregorian dates
def convert_to_gregorian(date_str):
    date_str = date_str.strip('月')
    year_str, month_str = date_str.split('年')
    roc_year = int(year_str)
    gregorian_year = roc_year + 1911
    return f'{gregorian_year}/{month_str}'



# Convert column names for date columns
new_columns = [convert_to_gregorian(col) for col in df.columns[4:-1]]
df.columns = list(df.columns[:4]) + new_columns + list(df.columns[-1:])

# Convert all tourist count data to numeric (coerce errors)
df_cleaned.iloc[:, 4:-1] = df_cleaned.iloc[:, 4:-1].apply(pd.to_numeric, errors='coerce')

# Summing the tourist counts for each county and month
monthly_totals = df_cleaned.groupby('縣市').sum()

# Ensure target counties are named correctly after the replacements
target_counties = ['Kinmen', 'Lianjiang', 'Penghu', 'Taitung']

# Prepare the data for plotting, ensuring no NaN values
data_to_plot = [monthly_totals.loc[county].dropna() for county in target_counties]

df_count_and_people = df_cleaned.drop(['Unnamed: 1','Unnamed: 3','遊憩據點','小計'],axis=1).groupby('縣市').sum()

# Create the boxplot
plt.figure(figsize=(12, 6))
plt.boxplot(df_count_and_people.T, labels=list(county_name_mapping.values()),patch_artist=True)

# Compute and annotate max and median values
for i, county in enumerate(target_counties):
    county_data = df_count_and_people.loc[county]
    max_value = county_data.max()
    median_value = county_data.median()

    plt.text(i + 1, median_value, f'Median: {int(median_value)}', ha='center', va='bottom', fontsize=10, color='black')
    plt.text(i + 1, max_value, f'Max: {int(max_value)}', ha='center', va='bottom', fontsize=10, color='blue')

# Final plot settings
plt.xlabel('County', fontsize=14)
plt.ylabel('Tourists', fontsize=14)
plt.grid(axis='y')
plt.xticks(rotation=45)
plt.tight_layout()

# Show plot
plt.savefig('001.jpg')

with open('HotelList.json', 'r', encoding='utf-8-sig') as file:
    data = json.load(file)

hotels_df = pd.json_normalize(data['Hotels'])
user_input_city = input("請輸入城市名稱（例如：臺東縣）：")
matching_hotels = hotels_df[hotels_df['PostalAddress.City'] == user_input_city]

if matching_hotels.empty:
    print("未找到符合地點的旅館/民宿")
    os._exit(0)

user_input_service = input("請輸入想要的服務資訊關鍵字（例如：自行車友善）：")
matching_hotels_city = matching_hotels

if not user_input_service in ['無','']:
  matching_hotels = matching_hotels_city[
    matching_hotels_city['ServiceInfo'].str.contains(user_input_service, na=False)
  ]
  if matching_hotels.empty:
    print("未找到在", user_input_city, "符合服務資訊的旅館。")
    os._exit(0)



# 用戶輸入的預算範圍
user_input_budget = int(input("請輸入預算（例如：2500）："))

# 最後篩選符合預算範圍的旅館
final_matching_hotels = matching_hotels[
    (matching_hotels['LowestPrice'] <= user_input_budget) &
    (matching_hotels['CeilingPrice'] >= user_input_budget)
]

if final_matching_hotels.empty:
    print("未找到在符合預算的旅館/民宿")
    os._exit(0)
print(final_matching_hotels[['HotelName','LowestPrice', 'CeilingPrice','Description','PostalAddress.Town','PostalAddress.StreetAddress']][:5].to_string(index=False))