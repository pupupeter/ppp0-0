# -*- coding: utf-8 -*-
"""市立鼓山高級中學_131014_簡宇柏

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VQh-sB1kAAeN5ycGsS7N3vr_UPh54FLc
"""

# -*- coding: utf-8 -*-
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import json

# For Google Colab: Upload the CSV file
from google.colab import files
uploaded = files.upload()

# Load the data (ensure the filename matches the uploaded file)
df = pd.read_csv('觀光遊憩據點按縣市及遊憩據點交叉分析.csv')

# Clean the data
df_cleaned = df.dropna(how='all').dropna(subset=['縣市', '遊憩據點'])
print("清理後的數據：")
print(df_cleaned.head())

# Set the index
df_cleaned.set_index('遊憩據點', inplace=True)

# Convert numeric columns to appropriate data types
df_numeric = df_cleaned.iloc[:, 3:15].apply(pd.to_numeric, errors='coerce').fillna(0)

# Transpose and plot
df_numeric.T.plot()
plt.title('遊客數趨勢')
plt.xlabel('月份')
plt.ylabel('遊客數')
plt.show()

# Convert ROC years to Gregorian
def convert_to_gregorian(date_str):
    date_str = date_str.strip('月')
    if '年' in date_str:
        year_str, month_str = date_str.split('年')
        return f"{int(year_str) + 1911}/{month_str}"
    else:
        return date_str  # 如果格式不正確，返回原始值或其他處理方式

# Update column names
new_columns = [convert_to_gregorian(col) for col in df_cleaned.columns[3:]]
df_cleaned.columns = list(df_cleaned.columns[:3]) + new_columns

# Melt the DataFrame
df_cleaned.reset_index(inplace=True)
df_melted = df_cleaned.melt(id_vars=['遊憩據點', '縣市'], var_name='日期', value_name='遊客數')

# Extract year
df_melted['年份'] = pd.to_datetime(df_melted['日期'], format='%Y/%m', errors='coerce').dt.year
df_melted['遊客數'] = df_melted['遊客數'].str.replace(' ', '', regex=False).astype(float).fillna(0).astype(int)

# Group by year and county
yearly_summary = df_melted.groupby(['年份', '縣市'])['遊客數'].sum().reset_index()

# Plot yearly summary
plt.figure(figsize=(12, 6))
sns.lineplot(data=yearly_summary, x='年份', y='遊客數', hue='縣市', marker='o')
plt.title('年度遊客數匯總')
plt.xlabel('年份')
plt.ylabel('遊客數')
plt.xticks(yearly_summary['年份'].unique())
plt.legend(title='縣市', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Load hotel data
with open('HotelList.json', 'r', encoding='utf-8-sig') as file:
    data = json.load(file)

# Convert JSON to DataFrame
hotels_df = pd.json_normalize(data['Hotels'])

# Get user input for city
user_input_city = input("請輸入城市名稱（例如：臺東縣）：")
matching_hotels = hotels_df[hotels_df['PostalAddress.City'] == user_input_city]

if not matching_hotels.empty:
    print("在", user_input_city, "的旅館有：")
    print(matching_hotels['HotelName'].to_string(index=False))
else:
    print("未找到", user_input_city, "的旅館。")

# User input for service information
user_input_service = input("請輸入想要的服務資訊關鍵字（例如：自行車友善）：")
matching_hotels = matching_hotels[matching_hotels['ServiceInfo'].str.contains(user_input_service, na=False)]

if not matching_hotels.empty:
    print("在", user_input_city, "的符合條件的旅館有：")
    print(matching_hotels[['HotelName', 'ServiceInfo']].to_string(index=False))
else:
    print("未找到在", user_input_city, "符合服務資訊的旅館。")

# User input for budget
user_input_budget = int(input("請輸入預算（例如：2500）："))
final_matching_hotels = matching_hotels[
    (matching_hotels['LowestPrice'] <= user_input_budget) &
    (matching_hotels['CeilingPrice'] >= user_input_budget)
]

if not final_matching_hotels.empty:
    print("在", user_input_city, "的符合 ", user_input_service, " 條件的旅館有：")
    print(final_matching_hotels[['HotelName', 'LowestPrice', 'CeilingPrice', 'ServiceInfo']].to_string(index=False))
else:
    print("未找到在", user_input_city, "符合服務資訊和預算的旅館。")