# -*- coding: utf-8 -*-
"""國立竹北高級中學_211150_吳翰宇

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nfcL_vOg8YqXNPKpoJJBFpefKnseJcuM
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
import json
warnings.filterwarnings("ignore", category=FutureWarning)

county_name_mapping = {
   '金門縣': 'Kinmen',
   '臺東縣': 'Taitung',
   '澎湖縣': 'Penghu',
   "連江縣": "Lianjiang"
}

df = pd.read_csv('觀光遊憩據點按縣市及遊憩據點交叉分析.csv')

df_cleaned = df.drop(0)
df_cleaned = df_cleaned.dropna(how='all')
df_cleaned = df_cleaned.dropna(subset=['縣市', '遊憩據點'])
df = df_cleaned
df.set_index('遊憩據點', inplace=True)

def convert_to_gregorian(date_str):
    #print(date_str)
    date_str = date_str.strip('月')
    year_str, month_str = date_str.split('年')
    roc_year = int(year_str)
    gregorian_year = roc_year + 1911
    return f'{gregorian_year}/{month_str}'

new_columns = [convert_to_gregorian(col) for col in df.columns[3:-1]]
df.columns = list(df.columns[:3]) + new_columns + list(df.columns[-1:])

df.reset_index(inplace=True)
df_melted = df.melt(id_vars=[ '遊憩據點','縣市', 'Unnamed: 1',  'Unnamed: 3'],
                    var_name='日期', value_name='遊客數')
df_melted = df_melted[~df_melted['日期'].str.contains('小計|合計', na=False)]

df_melted['遊客數'] = df_melted['遊客數'].str.replace(' ', '').astype(float).fillna(0).astype(int)
df_melted['縣市'] = df_melted['縣市'].replace(county_name_mapping)
df_melted = df_melted.groupby(['日期', '縣市'])['遊客數'].sum().reset_index()

df_melted
stats = df_melted.groupby('縣市')['遊客數'].agg(['median', 'max'])
stats
plt.figure(figsize=(12, 6))
# 在箱型圖上標註中位數和最大值
sns.boxplot(x='縣市', y='遊客數', data=df_melted)
for i, county in enumerate(stats.index):
    plt.text(i, stats['median'][county], f'Median: {int(stats["median"][county])}',
             ha='center', va='bottom', fontsize=10, color='black')
    plt.text(i, stats['max'][county], f'Max: {int(stats["max"][county])}',
             ha='center', va='bottom', fontsize=10, color='blue')

plt.xlabel('County', fontsize=14)
plt.ylabel('Tourists', fontsize=14)
plt.grid(axis='y')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("001.jpg")
plt.clf()
with open('HotelList.json', 'r', encoding='utf-8-sig') as f:
    data = json.load(f)

hotels_df = pd.json_normalize(data['Hotels'])

# 使用者輸入
user_input_city = input()
user_input_special_condition = input() or '無'
user_input_price_range = int(input())

# 篩選旅館
matching_hotels = hotels_df[hotels_df['PostalAddress.City'] == user_input_city]

if matching_hotels.empty:
    print("未找到符合地點的旅館/民宿")
else:
    if user_input_special_condition != '無':
        matching_hotels = matching_hotels[matching_hotels['ServiceInfo'].str.contains(user_input_special_condition, case=False, na=False)]

        if matching_hotels.empty:
            print("未找到符合地點和特殊需求的旅館/民宿")
        else:
            matching_hotels = matching_hotels[(matching_hotels['LowestPrice'] >= 1) & (matching_hotels['CeilingPrice'] <= user_input_price_range)]

            if not matching_hotels.empty:
                print(matching_hotels[['HotelName', 'LowestPrice', 'CeilingPrice', 'Description', 'PostalAddress.Town', 'PostalAddress.StreetAddress']].head(5).to_string(index=False))
            else:
                print("未找到符合預算的旅館/民宿")
    else:
        matching_hotels = matching_hotels[(matching_hotels['LowestPrice'] >= 1) & (matching_hotels['CeilingPrice'] <= user_input_price_range)]

        if not matching_hotels.empty:
            print(matching_hotels[['HotelName', 'LowestPrice', 'CeilingPrice', 'Description', 'PostalAddress.Town', 'PostalAddress.StreetAddress']].head(5).to_string(index=False))
        else:
            print("未找到符合預算的旅館/民宿")