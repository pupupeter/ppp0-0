# -*- coding: utf-8 -*-
"""hw3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10KgEzxdwVDwZqPpIZmcRJqBD4XodGQ2p
"""

# !pip install pandas matplotlib seaborn numpy
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import json
from tabulate import tabulate
warnings.filterwarnings("ignore", category=FutureWarning)

# Load .csv file
df = pd.read_csv("觀光遊憩據點按縣市及遊憩據點交叉分析.csv")

# Language translate table
county_name_mapping = {
   '金門縣': 'Kinmen',
   "連江縣": "Lianjiang",
   '澎湖縣': 'Penghu',
   '臺東縣': 'Taitung'
}

# Translate
df['縣市'] = df['縣市'].replace(county_name_mapping)
# Get Months_columns
Months_columns = df.columns[4:-1]
df[Months_columns] = df[Months_columns].apply(pd.to_numeric, errors='coerce')
# for cols in Months_columns:
#     df[cols] = pd.to_numeric(df[cols].str.extract(r'(\d+)', expand=False), errors='coerce')
# df['總和'] = df[Months_columns].sum(axis=1) ??

# County_sum = df.groupby('縣市')['總和'].agg(['median', 'max']).reset_index() ??
County_sum = df.groupby('縣市')[Months_columns].sum().reset_index()
long_format = County_sum.melt(id_vars='縣市', value_vars=Months_columns, var_name='月份', value_name='遊客數') #?
# Plot Settings
plt.figure(figsize=(12, 6))
# sns.boxplot(x='縣市', y='總和', data=df, order=list(county_name_mapping.values()), showfliers=True) ??
sns.boxplot(x='縣市', y='遊客數', data=long_format, order=list(county_name_mapping.values()))
# stats = County_sum.set_index('縣市') ?
stats = long_format.groupby('縣市')['遊客數'].agg(['median', 'max'])
for i, county in enumerate(stats.index):
    plt.text(i, stats['median'][county], f'Median: {int(stats["median"][county])}',
             ha='center', va='bottom', fontsize=10, color='black')
    plt.text(i, stats['max'][county], f'Max: {int(stats["max"][county])}',
             ha='center', va='bottom', fontsize=10, color='blue')

plt.xlabel('County', fontsize=14)
plt.ylabel('Tourists', fontsize=14)
plt.grid(axis='y')
plt.xticks(rotation=45)
plt.tight_layout()

# Save plot
plt.savefig('001.jpg')
# plt.clf()
# plt.close()

# Json file
with open('HotelList.json', 'r', encoding = 'utf-8-sig') as file:
    data = json.load(file)

hotels_df = pd.json_normalize(data['Hotels'])
# First input : city's name
user_input_city = input()
# First check by city
matching_hotels_city = hotels_df[hotels_df['PostalAddress.City'] == user_input_city]
if matching_hotels_city.empty:
    print("未找到符合地點的旅館/民宿")
else:
    # Second input : user's request :(
    user_input_hassle = input()

    matching_hotels_hassle = matching_hotels_city
    if user_input_hassle.lower() != '' and user_input_hassle.lower()!='無':
        matching_hotels_hassle = matching_hotels_city[
            matching_hotels_city['ServiceInfo'].str.contains(user_input_hassle, case=False, na=False)]
        if matching_hotels_hassle.empty:
            print("未找到符合地點和特殊需求的旅館/民宿")

    if not matching_hotels_hassle.empty:
        user_input_money = int(input())

        matching_hotels_money = matching_hotels_hassle[
            (matching_hotels_hassle['LowestPrice'] <= user_input_money) &
            (matching_hotels_hassle['CeilingPrice'] >= user_input_money)
        ]
        if matching_hotels_money.empty:
            print("未找到符合預算的旅館/民宿")
        else:
            columns_to_display = ['HotelName', 'LowestPrice', 'CeilingPrice', 'Description', 'PostalAddress.Town', 'PostalAddress.StreetAddress']
            print(matching_hotels_money[columns_to_display].head(5).to_string(index=False))